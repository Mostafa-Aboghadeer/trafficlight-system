
trafficlight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000460  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  000004d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000504  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012f4  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090f  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000092e  00000000  00000000  0000229b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  00002bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ef  00000000  00000000  00002e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000646  00000000  00000000  0000331f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003965  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 20 01 	jmp	0x240	; 0x240 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7d 01 	call	0x2fa	; 0x2fa <main>
  74:	0c 94 2e 02 	jmp	0x45c	; 0x45c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <app_start>:
unsigned int street_state=0;
uint8_t red,yellow,green=0;

void app_start()
{	
	button_init(buttonport,buttonpin);
  7c:	62 e0       	ldi	r22, 0x02	; 2
  7e:	84 e4       	ldi	r24, 0x44	; 68
  80:	0e 94 6d 01 	call	0x2da	; 0x2da <button_init>
	LED_init('A',car_GREEN);
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LED_init>
	LED_init('A',car_YELLOW);
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LED_init>
	LED_init('A',car_RED);
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	81 e4       	ldi	r24, 0x41	; 65
  98:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LED_init>
	LED_init('B',pedestrian_GREEN);
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LED_init>
	LED_init('A',pedestrian_YELLOW);
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	81 e4       	ldi	r24, 0x41	; 65
  a8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LED_init>
	LED_init('A',pedestrian_RED);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	81 e4       	ldi	r24, 0x41	; 65
  b0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LED_init>
	ENB_GENERAL_INTERRUPT;
  b4:	8f b7       	in	r24, 0x3f	; 63
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	8f bf       	out	0x3f, r24	; 63
	timer_init();
  ba:	0e 94 0c 02 	call	0x418	; 0x418 <timer_init>
	rising_edg();
  be:	0e 94 08 02 	call	0x410	; 0x410 <rising_edg>
	INT0_enb();
  c2:	0e 94 04 02 	call	0x408	; 0x408 <INT0_enb>
	
	while (1)
	
	{

		switch (street_state)
  c6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <street_state>
  ca:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <street_state+0x1>
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	91 05       	cpc	r25, r1
  d2:	21 f1       	breq	.+72     	; 0x11c <app_start+0xa0>
  d4:	20 f0       	brcs	.+8      	; 0xde <app_start+0x62>
  d6:	02 97       	sbiw	r24, 0x02	; 2
  d8:	09 f4       	brne	.+2      	; 0xdc <app_start+0x60>
  da:	57 c0       	rjmp	.+174    	; 0x18a <app_start+0x10e>
  dc:	f4 cf       	rjmp	.-24     	; 0xc6 <app_start+0x4a>
		
		{
			case 0:
			LED_on('A',car_GREEN);
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	81 e4       	ldi	r24, 0x41	; 65
  e2:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_on>
			delay();
  e6:	0e 94 15 02 	call	0x42a	; 0x42a <delay>
			LED_off('A',car_GREEN);
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	81 e4       	ldi	r24, 0x41	; 65
  ee:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_off>
			LED_on('A',car_YELLOW);
  f2:	61 e0       	ldi	r22, 0x01	; 1
  f4:	81 e4       	ldi	r24, 0x41	; 65
  f6:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_on>
			delay();
  fa:	0e 94 15 02 	call	0x42a	; 0x42a <delay>
			LED_off('A',car_YELLOW);
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	81 e4       	ldi	r24, 0x41	; 65
 102:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_off>
			LED_on('A',car_RED);
 106:	62 e0       	ldi	r22, 0x02	; 2
 108:	81 e4       	ldi	r24, 0x41	; 65
 10a:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_on>
			delay();
 10e:	0e 94 15 02 	call	0x42a	; 0x42a <delay>
			LED_off('A',car_RED);
 112:	62 e0       	ldi	r22, 0x02	; 2
 114:	81 e4       	ldi	r24, 0x41	; 65
 116:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_off>
			break;
 11a:	d5 cf       	rjmp	.-86     	; 0xc6 <app_start+0x4a>
			case 1:
			LED_on('A',car_RED);
 11c:	62 e0       	ldi	r22, 0x02	; 2
 11e:	81 e4       	ldi	r24, 0x41	; 65
 120:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_on>
			LED_on('B',pedestrian_GREEN);
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	82 e4       	ldi	r24, 0x42	; 66
 128:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_on>
			delay();
 12c:	0e 94 15 02 	call	0x42a	; 0x42a <delay>
			LED_off('A',car_RED);
 130:	62 e0       	ldi	r22, 0x02	; 2
 132:	81 e4       	ldi	r24, 0x41	; 65
 134:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_off>
			LED_on('A',car_YELLOW);
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	81 e4       	ldi	r24, 0x41	; 65
 13c:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_on>
			LED_on('B',pedestrian_YELLOW);
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	82 e4       	ldi	r24, 0x42	; 66
 144:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_on>
			delay();
 148:	0e 94 15 02 	call	0x42a	; 0x42a <delay>
			LED_off('A',car_YELLOW);
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	81 e4       	ldi	r24, 0x41	; 65
 150:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_off>
			LED_off('B',pedestrian_YELLOW);
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	82 e4       	ldi	r24, 0x42	; 66
 158:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_off>
			LED_off('B',pedestrian_GREEN);
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	82 e4       	ldi	r24, 0x42	; 66
 160:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_off>
			LED_on('A',car_GREEN);
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	81 e4       	ldi	r24, 0x41	; 65
 168:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_on>
			LED_on('B',pedestrian_RED);
 16c:	62 e0       	ldi	r22, 0x02	; 2
 16e:	82 e4       	ldi	r24, 0x42	; 66
 170:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_on>
			delay();
 174:	0e 94 15 02 	call	0x42a	; 0x42a <delay>
			LED_off('B',pedestrian_RED);
 178:	62 e0       	ldi	r22, 0x02	; 2
 17a:	82 e4       	ldi	r24, 0x42	; 66
 17c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_off>
			street_state=0;
 180:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <street_state+0x1>
 184:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <street_state>
			break;
 188:	9e cf       	rjmp	.-196    	; 0xc6 <app_start+0x4a>
			case 2:
			LED_on('B',pedestrian_RED);
 18a:	62 e0       	ldi	r22, 0x02	; 2
 18c:	82 e4       	ldi	r24, 0x42	; 66
 18e:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_on>
			LED_on('A',car_GREEN);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	81 e4       	ldi	r24, 0x41	; 65
 196:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_on>
			delay();
 19a:	0e 94 15 02 	call	0x42a	; 0x42a <delay>
			LED_off('B',pedestrian_RED);
 19e:	62 e0       	ldi	r22, 0x02	; 2
 1a0:	82 e4       	ldi	r24, 0x42	; 66
 1a2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_off>
			LED_off('A',car_GREEN);
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	81 e4       	ldi	r24, 0x41	; 65
 1aa:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_off>
			LED_on('A',car_YELLOW);
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	81 e4       	ldi	r24, 0x41	; 65
 1b2:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_on>
			LED_on('B',pedestrian_YELLOW);
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	82 e4       	ldi	r24, 0x42	; 66
 1ba:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_on>
			delay();
 1be:	0e 94 15 02 	call	0x42a	; 0x42a <delay>
			LED_off('A',car_YELLOW);
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	81 e4       	ldi	r24, 0x41	; 65
 1c6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_off>
			LED_off('A',pedestrian_YELLOW);
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	81 e4       	ldi	r24, 0x41	; 65
 1ce:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_off>
			LED_on('A',car_RED);
 1d2:	62 e0       	ldi	r22, 0x02	; 2
 1d4:	81 e4       	ldi	r24, 0x41	; 65
 1d6:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_on>
			LED_on('B',pedestrian_GREEN);
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	82 e4       	ldi	r24, 0x42	; 66
 1de:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_on>
			delay();
 1e2:	0e 94 15 02 	call	0x42a	; 0x42a <delay>
			LED_off('A',car_RED);
 1e6:	62 e0       	ldi	r22, 0x02	; 2
 1e8:	81 e4       	ldi	r24, 0x41	; 65
 1ea:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_off>
			LED_on('A',car_YELLOW);
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	81 e4       	ldi	r24, 0x41	; 65
 1f2:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_on>
			LED_on('B',pedestrian_YELLOW);
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	82 e4       	ldi	r24, 0x42	; 66
 1fa:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_on>
			delay();
 1fe:	0e 94 15 02 	call	0x42a	; 0x42a <delay>
			LED_off('A',car_YELLOW);
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	81 e4       	ldi	r24, 0x41	; 65
 206:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_off>
			LED_off('A',pedestrian_YELLOW);
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	81 e4       	ldi	r24, 0x41	; 65
 20e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_off>
			LED_off('B',pedestrian_GREEN);
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	82 e4       	ldi	r24, 0x42	; 66
 216:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_off>
			LED_on('A',car_GREEN);
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	81 e4       	ldi	r24, 0x41	; 65
 21e:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_on>
			LED_on('B',pedestrian_RED);
 222:	62 e0       	ldi	r22, 0x02	; 2
 224:	82 e4       	ldi	r24, 0x42	; 66
 226:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_on>
			delay();
 22a:	0e 94 15 02 	call	0x42a	; 0x42a <delay>
			LED_off('B',pedestrian_RED);
 22e:	62 e0       	ldi	r22, 0x02	; 2
 230:	82 e4       	ldi	r24, 0x42	; 66
 232:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_off>
			street_state=0;
 236:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <street_state+0x1>
 23a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <street_state>
			break;
 23e:	43 cf       	rjmp	.-378    	; 0xc6 <app_start+0x4a>

00000240 <__vector_1>:
		
	}
	
}
EXT_INT_0 (INT0_vect)
{
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	6f 93       	push	r22
 254:	7f 93       	push	r23
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
	DIO_read('A',car_RED,&red);
 262:	46 e6       	ldi	r20, 0x66	; 102
 264:	50 e0       	ldi	r21, 0x00	; 0
 266:	62 e0       	ldi	r22, 0x02	; 2
 268:	81 e4       	ldi	r24, 0x41	; 65
 26a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <DIO_read>
	DIO_read('A',car_YELLOW,&yellow);
 26e:	45 e6       	ldi	r20, 0x65	; 101
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	81 e4       	ldi	r24, 0x41	; 65
 276:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <DIO_read>
	DIO_read('A',car_GREEN,&green);
 27a:	40 e6       	ldi	r20, 0x60	; 96
 27c:	50 e0       	ldi	r21, 0x00	; 0
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	81 e4       	ldi	r24, 0x41	; 65
 282:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <DIO_read>

	if (!red)
 286:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <red>
 28a:	81 11       	cpse	r24, r1
 28c:	07 c0       	rjmp	.+14     	; 0x29c <__vector_1+0x5c>
	{
		street_state=1;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <street_state+0x1>
 296:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <street_state>
 29a:	0e c0       	rjmp	.+28     	; 0x2b8 <__vector_1+0x78>
	}
	else if (!green || !yellow)
 29c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2a0:	88 23       	and	r24, r24
 2a2:	21 f0       	breq	.+8      	; 0x2ac <__vector_1+0x6c>
 2a4:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <yellow>
 2a8:	81 11       	cpse	r24, r1
 2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <__vector_1+0x78>
	{
		street_state=2;
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <street_state+0x1>
 2b4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <street_state>
	}

}
 2b8:	ff 91       	pop	r31
 2ba:	ef 91       	pop	r30
 2bc:	bf 91       	pop	r27
 2be:	af 91       	pop	r26
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	7f 91       	pop	r23
 2c6:	6f 91       	pop	r22
 2c8:	5f 91       	pop	r21
 2ca:	4f 91       	pop	r20
 2cc:	3f 91       	pop	r19
 2ce:	2f 91       	pop	r18
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <button_init>:
#include "../../lib/bit_math.h"
#include "button.h"
#include "../../MCAL/dio/dio_interface.h"
void button_init(uint8_t buttonport,uint8_t buttonpin)
{
	DIO_init(buttonport,buttonpin,IN);
 2da:	40 e0       	ldi	r20, 0x00	; 0
 2dc:	0e 94 9a 01 	call	0x334	; 0x334 <DIO_init>
 2e0:	08 95       	ret

000002e2 <LED_init>:
#include "LED.h"
#include "../../MCAL/dio/dio_interface.h"

void LED_init (uint8_t LEDport, uint8_t LEDpin)
{
	DIO_init(LEDport,LEDpin,OUT);
 2e2:	41 e0       	ldi	r20, 0x01	; 1
 2e4:	0e 94 9a 01 	call	0x334	; 0x334 <DIO_init>
 2e8:	08 95       	ret

000002ea <LED_on>:
}
void LED_on (uint8_t LEDport, uint8_t LEDpin)
{
	DIO_write(LEDport,LEDpin,HIGH);
 2ea:	41 e0       	ldi	r20, 0x01	; 1
 2ec:	0e 94 bf 01 	call	0x37e	; 0x37e <DIO_write>
 2f0:	08 95       	ret

000002f2 <LED_off>:
}
void LED_off (uint8_t LEDport, uint8_t LEDpin)
{
		DIO_write(LEDport,LEDpin,LOW);
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	0e 94 bf 01 	call	0x37e	; 0x37e <DIO_write>
 2f8:	08 95       	ret

000002fa <main>:
 * Author : darsh
 */ 
#include "Application/APP.h"
int main(void)
{
	app_start();
 2fa:	0e 94 3e 00 	call	0x7c	; 0x7c <app_start>
}
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	08 95       	ret

00000304 <DIO_ptr_regs>:
void DIO_toggle(uint8_t PORTnum,uint8_t PINnum)
{
	volatile PORT_t * PORTX= 0;
	PORTX= DIO_ptr_regs(PORTnum);
	TOGGLEBIT (PORTX->PORT,PINnum);
}
 304:	82 34       	cpi	r24, 0x42	; 66
 306:	99 f0       	breq	.+38     	; 0x32e <DIO_ptr_regs+0x2a>
 308:	18 f4       	brcc	.+6      	; 0x310 <DIO_ptr_regs+0xc>
 30a:	81 34       	cpi	r24, 0x41	; 65
 30c:	69 f0       	breq	.+26     	; 0x328 <DIO_ptr_regs+0x24>
 30e:	0b c0       	rjmp	.+22     	; 0x326 <DIO_ptr_regs+0x22>
 310:	83 34       	cpi	r24, 0x43	; 67
 312:	19 f0       	breq	.+6      	; 0x31a <DIO_ptr_regs+0x16>
 314:	84 34       	cpi	r24, 0x44	; 68
 316:	21 f0       	breq	.+8      	; 0x320 <DIO_ptr_regs+0x1c>
 318:	06 c0       	rjmp	.+12     	; 0x326 <DIO_ptr_regs+0x22>
 31a:	83 e3       	ldi	r24, 0x33	; 51
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	08 95       	ret
 320:	80 e3       	ldi	r24, 0x30	; 48
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	08 95       	ret
 326:	08 95       	ret
 328:	89 e3       	ldi	r24, 0x39	; 57
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	08 95       	ret
 32e:	86 e3       	ldi	r24, 0x36	; 54
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	08 95       	ret

00000334 <DIO_init>:
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	d6 2f       	mov	r29, r22
 33a:	c4 2f       	mov	r28, r20
 33c:	0e 94 82 01 	call	0x304	; 0x304 <DIO_ptr_regs>
 340:	c1 11       	cpse	r28, r1
 342:	0d c0       	rjmp	.+26     	; 0x35e <DIO_init+0x2a>
 344:	fc 01       	movw	r30, r24
 346:	41 81       	ldd	r20, Z+1	; 0x01
 348:	21 e0       	ldi	r18, 0x01	; 1
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_init+0x1e>
 34e:	22 0f       	add	r18, r18
 350:	33 1f       	adc	r19, r19
 352:	da 95       	dec	r29
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_init+0x1a>
 356:	20 95       	com	r18
 358:	24 23       	and	r18, r20
 35a:	21 83       	std	Z+1, r18	; 0x01
 35c:	0d c0       	rjmp	.+26     	; 0x378 <DIO_init+0x44>
 35e:	c1 30       	cpi	r28, 0x01	; 1
 360:	59 f4       	brne	.+22     	; 0x378 <DIO_init+0x44>
 362:	fc 01       	movw	r30, r24
 364:	41 81       	ldd	r20, Z+1	; 0x01
 366:	21 e0       	ldi	r18, 0x01	; 1
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_init+0x3c>
 36c:	22 0f       	add	r18, r18
 36e:	33 1f       	adc	r19, r19
 370:	da 95       	dec	r29
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_init+0x38>
 374:	24 2b       	or	r18, r20
 376:	21 83       	std	Z+1, r18	; 0x01
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	08 95       	ret

0000037e <DIO_write>:
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	d6 2f       	mov	r29, r22
 384:	c4 2f       	mov	r28, r20
 386:	0e 94 82 01 	call	0x304	; 0x304 <DIO_ptr_regs>
 38a:	c1 11       	cpse	r28, r1
 38c:	0d c0       	rjmp	.+26     	; 0x3a8 <DIO_write+0x2a>
 38e:	fc 01       	movw	r30, r24
 390:	42 81       	ldd	r20, Z+2	; 0x02
 392:	21 e0       	ldi	r18, 0x01	; 1
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	0d 2e       	mov	r0, r29
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_write+0x20>
 39a:	22 0f       	add	r18, r18
 39c:	33 1f       	adc	r19, r19
 39e:	0a 94       	dec	r0
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_write+0x1c>
 3a2:	20 95       	com	r18
 3a4:	24 23       	and	r18, r20
 3a6:	22 83       	std	Z+2, r18	; 0x02
 3a8:	c1 30       	cpi	r28, 0x01	; 1
 3aa:	59 f4       	brne	.+22     	; 0x3c2 <DIO_write+0x44>
 3ac:	fc 01       	movw	r30, r24
 3ae:	42 81       	ldd	r20, Z+2	; 0x02
 3b0:	21 e0       	ldi	r18, 0x01	; 1
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_write+0x3c>
 3b6:	22 0f       	add	r18, r18
 3b8:	33 1f       	adc	r19, r19
 3ba:	da 95       	dec	r29
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_write+0x38>
 3be:	24 2b       	or	r18, r20
 3c0:	22 83       	std	Z+2, r18	; 0x02
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <DIO_read>:
void DIO_read(uint8_t PORTnum,uint8_t PINnum, uint8_t *val)
{
 3c8:	1f 93       	push	r17
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	16 2f       	mov	r17, r22
 3d0:	ea 01       	movw	r28, r20
	volatile PORT_t * PORTX= 0;
	PORTX= DIO_ptr_regs(PORTnum);
 3d2:	0e 94 82 01 	call	0x304	; 0x304 <DIO_ptr_regs>
	*val = GETBIT (PORTX->PIN,PINnum);
 3d6:	fc 01       	movw	r30, r24
 3d8:	40 81       	ld	r20, Z
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	9c 01       	movw	r18, r24
 3e0:	01 2e       	mov	r0, r17
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_read+0x20>
 3e4:	22 0f       	add	r18, r18
 3e6:	33 1f       	adc	r19, r19
 3e8:	0a 94       	dec	r0
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_read+0x1c>
 3ec:	84 2f       	mov	r24, r20
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	82 23       	and	r24, r18
 3f2:	93 23       	and	r25, r19
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_read+0x32>
 3f6:	95 95       	asr	r25
 3f8:	87 95       	ror	r24
 3fa:	1a 95       	dec	r17
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_read+0x2e>
 3fe:	88 83       	st	Y, r24
	 
}
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	1f 91       	pop	r17
 406:	08 95       	ret

00000408 <INT0_enb>:
{
	SETBIT (GICR,7);
}
void INT2_enb()
{
	SETBIT (GICR,5);
 408:	8b b7       	in	r24, 0x3b	; 59
 40a:	80 64       	ori	r24, 0x40	; 64
 40c:	8b bf       	out	0x3b, r24	; 59
 40e:	08 95       	ret

00000410 <rising_edg>:
}
void rising_edg()
{
	MCUCR |= (1<<0) | (1<<1);
 410:	85 b7       	in	r24, 0x35	; 53
 412:	83 60       	ori	r24, 0x03	; 3
 414:	85 bf       	out	0x35, r24	; 53
 416:	08 95       	ret

00000418 <timer_init>:
uint8_t int_flag=0;
unsigned int overflow_counter=0;

void timer_init()
{
	TCCR0=0x00;
 418:	13 be       	out	0x33, r1	; 51
	TCNT0=0x00;
 41a:	12 be       	out	0x32, r1	; 50
 41c:	08 95       	ret

0000041e <timer_start>:
}
void timer_start()
{
	TCCR0|= (1<<2) |(1<<0); //prescale CLK/1024
 41e:	83 b7       	in	r24, 0x33	; 51
 420:	85 60       	ori	r24, 0x05	; 5
 422:	83 bf       	out	0x33, r24	; 51
 424:	08 95       	ret

00000426 <timer_stop>:
}
void timer_stop()
{

	TCCR0=0x00;
 426:	13 be       	out	0x33, r1	; 51
 428:	08 95       	ret

0000042a <delay>:
}
void delay()
{
	timer_start();
 42a:	0e 94 0f 02 	call	0x41e	; 0x41e <timer_start>
	while (overflow_counter < final_overflows)
 42e:	08 c0       	rjmp	.+16     	; 0x440 <delay+0x16>
	{
		while((TIFR & (1<<0))==0);
 430:	08 b6       	in	r0, 0x38	; 56
 432:	00 fe       	sbrs	r0, 0
 434:	fd cf       	rjmp	.-6      	; 0x430 <delay+0x6>
		//SETBIT(TIFR,0);

		overflow_counter++;
 436:	01 96       	adiw	r24, 0x01	; 1
 438:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <overflow_counter+0x1>
 43c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <overflow_counter>
	TCCR0=0x00;
}
void delay()
{
	timer_start();
	while (overflow_counter < final_overflows)
 440:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <overflow_counter>
 444:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <overflow_counter+0x1>
 448:	83 31       	cpi	r24, 0x13	; 19
 44a:	91 05       	cpc	r25, r1
 44c:	88 f3       	brcs	.-30     	; 0x430 <delay+0x6>
		while((TIFR & (1<<0))==0);
		//SETBIT(TIFR,0);

		overflow_counter++;
			}
			overflow_counter=0;
 44e:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <overflow_counter+0x1>
 452:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <overflow_counter>
		timer_stop();
 456:	0e 94 13 02 	call	0x426	; 0x426 <timer_stop>
 45a:	08 95       	ret

0000045c <_exit>:
 45c:	f8 94       	cli

0000045e <__stop_program>:
 45e:	ff cf       	rjmp	.-2      	; 0x45e <__stop_program>
